data1 = data
data1 = data.frame(data)
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
z=data1$Sex = factor(data$Sex,levels = c("m","f"),labels = c(0,1))
data1[is.na(data1)]=0
logit = glm( y ~ AGE ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
AGE=as.numeric(AGE)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*AGE
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
knitr::opts_chunk$set(warning = FALSE,message = FALSE)
data1 = data
data1 = data.frame(data)
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
z=data1$Sex = factor(data$Sex,levels = c("m","f"),labels = c(0,1))
data1[is.na(data1)]=0
logit = glm( y ~ AGE ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
AGE=as.numeric(AGE)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*AGE
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
install.packages("optim.functions")
library(moments)
library(RColorBrewer)
library(plotrix)
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggthemes)
library(pracma)
library(MASS)
library(moments)
library(RColorBrewer)
library(plotrix)
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggthemes)
library(pracma)
library(MASS)
library(optim.functions)
data1 = data
data1 = data.frame(data)
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
z=data1$Sex = factor(data$Sex,levels = c("m","f"),labels = c(0,1))
data1[is.na(data1)]=0
logit = glm( y ~ AGE ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
AGE=as.numeric(AGE)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*AGE
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
logit = glm( y ~ AGE ,data = data1, family = "binomial")
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ z ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
z=as.numeric(z)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*z
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$ALB ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$ALB=as.numeric(data1$ALB)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$ALB
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(1,1),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$ALP ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$ALP=as.numeric(data1$ALP)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$ALP
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(1,1),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$ALT ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$ALT=as.numeric(data1$ALT)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$ALT
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(1,1),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$AST ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$AST=as.numeric(data1$AST)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$AST
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(1,1),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$BIL ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$BIL=as.numeric(data1$BIL)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$BIL
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(1,1),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$CHE ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$CHE=as.numeric(data1$CHE)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$CHE
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$CHOL ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$CHOL=as.numeric(data1$CHOL)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$CHOL
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$GGT ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$GGT=as.numeric(data1$GGT)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$GGT
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(1,1),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$PROT ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$PROT=as.numeric(data1$PROT)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$PROT
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
y=data1$Category = factor(data$Category,levels=c("0=Blood Donor","0s=suspect Blood Donor","1=Hepatitis","2=Fibrosis","3=Cirrhosis"),labels=c(0,0,1,1,1))
logit = glm( y ~ data1$PROT ,data = data1, family = "binomial")
summary(logit)
y=as.numeric(y)
data1$PROT=as.numeric(data1$PROT)
##Parameter estimation using MLE method
f=function(par)
{
a=par[1]
b=par[2]
z=array(0)
u=a+b*data1$PROT
z=sum((y-1)*log(exp(u)/(1+exp(u)))+(2-y)*log(1/(1+exp(u))))
return(z)
}
f(c(1,1))
#optim(par=c(5,5),fn=f,control=list(fnscale= -1),hessian =T)$par
ggplot(data, aes(x = data1$Category,y= data1$Age))+geom_point(col="darkgreen",size=3,alpha=0.51) +stat_smooth(method = "glm", col = "darkgreen",lwd=2)+theme_gray(base_size = 10)
alpha = 0
beta = 1
alpha_cap=c()
beta_cap=c()
u=c()
v=c()
var=1
n=10
x = seq(0,5,length.out=n)
for (i in 1:100) {
e=rnorm(n,0,sqrt(var))
y = alpha + beta*x + e
mean_x=mean(x)
mean_y=mean(y)
var_x=var(x)
beta_cap[i] = (mean(x*y) - mean(x)*mean(y))/((sum(x^2)/n)-mean(x)^2)
alpha_cap[i] = mean(y) - beta_cap*mean(x)
u[i]=((x/n)-mean_x/n)/var_x
v[i]=(1/n)-mean_x*u
}
hist(beta_cap, breaks=10,probability = T)
hist(alpha_cap, breaks=10,probability = T)
summary(alpha_cap)
summary(beta_cap)
a=seq(-1.4,0.5,0.001)
b= seq(0.5,1.5,0.001)
dnorm(b,beta,(sqrt(var)/sum(x-mean(x))^2))
curve(dnorm(b,beta,(sqrt(var)/sum(x-mean(x))^2)),add = T)
n=10
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "curl", "data.table", "dbplyr", "DescTools", "digest", "dplyr", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "ggside", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lhs", "lubridate", "markdown", "modelr", "openssl", "pillar", "pkgbuild", "pkgdown", "ps", "purrr", "ragg", "randtoolbox", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rngWELL", "roxygen2", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml"))
help(mtcars)
help(mtcars)
library(readr)
library(data.table)
library(VIM)
library(DMwR)
updateR()
install.packages("installr")
library(installr)
updateR()
setwd("C:\\Users\\anjal\\Downloads\\HDA")
library(sparcl)
library(ggplot2)
library(fpc)
tumor_data = read.csv("tumor_impute.csv")
normalized_df <- as.data.frame(scale(tumor_data, center = TRUE, scale = TRUE))
sil = 0
n_clust = 10
i_values = 2:n_clust
for(i in i_values){
kmeans = KMeansSparseCluster(x=normalized_df, K=i)
summary(kmeans)
normalized_df$cluster = kmeans[[20]]$Cs
sil[i] = cluster.stats(dist(normalized_df), kmeans[[20]]$Cs, silhouette = TRUE)$avg.silwidth
}
result_matrix <- data.frame(i = i_values, silwidth=sil[2:n_clust])
ggplot(result_matrix, aes(x = i, y = silwidth)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal Number of Clusters", x = "Number of Clusters (k)", y = "Silhouette Width") +
theme_minimal()
setwd("C:\\Users\\anjal\\Downloads\\HDA")
library(sparcl)
library(ggplot2)
library(fpc)
library(factoextra)
library(NbClust)
tumor_data = read.csv("tumor_impute.csv")
normalized_df <- as.data.frame(scale(tumor_data, center = TRUE, scale = TRUE))
wcss = 0
n_clust = 10
i_values = 2:n_clust
for(i in i_values){
kmeans = KMeansSparseCluster(x=normalized_df, K=i)
summary(kmeans)
#normalized_df$cluster = kmeans[[20]]$Cs
wcss[i] = kmeans[[20]]$wcss$wcss
}
setwd("C:\\Users\\anjal\\Downloads\\HDA")
library(sparcl)
library(ggplot2)
library(fpc)
library(factoextra)
library(NbClust)
tumor_data = read.csv("tumor_impute.csv")
normalized_df <- as.data.frame(scale(tumor_data, center = TRUE, scale = TRUE))
wcss = 0
n_clust = 10
i_values = 2:n_clust
for(i in i_values){
kmeans = KMeansSparseCluster(x=normalized_df, K=i)
summary(kmeans)
#normalized_df$cluster = kmeans[[20]]$Cs
wcss[i] = kmeans[[20]]$wcss$wcss
}
weights <- kmeans[[20]]$ws
# Feature names from colnames(tumor_data)
feature_names <- colnames(tumor_data)
# Create a data frame with feature names and weights
feature_df <- data.frame(Feature = feature_names, Weight = weights)
# Sort the data frame by weight in descending order
sorted_feature_df <- feature_df[order(-feature_df$Weight), ]
# Print the sorted data frame
print(sorted_feature_df)
result_matrix <- data.frame(i = i_values, wcss = wcss[2:n_clust])
ggplot(result_matrix, aes(x = i, y = wcss)) +
geom_line() +
geom_point() +
labs(title = "Elbow Method for Optimal Number of Clusters", x = "Number of Clusters (k)", y = "Within-Cluster Sum of Squares") +
theme_minimal()
# Perform min-max scaling on the weights
min_weight <- min(sorted_feature_df$Weight)
max_weight <- max(sorted_feature_df$Weight)
scaled_weights <- (sorted_feature_df$Weight - min_weight) / (max_weight - min_weight)
sorted_feature_df$scaled_weights <- scaled_weights
# Create a bar plot of scaled weights
library(ggplot2)
bar_plot_scaled <- ggplot(sorted_feature_df[1:100,], aes(x = reorder(Feature, -scaled_weights), y = scaled_weights)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
xlab("Feature") +
ylab("Scaled Weight") +  # Update the y-axis label
ggtitle("Top 30 Min-Max Scaled Feature Weights") +  # Update the title
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the bar plot
print(bar_plot_scaled)
setwd("C:\\Users\\anjal\\Downloads\\HDA")
library(sparcl)
library(ggplot2)
library(fpc)
tumor_data = read.csv("tumor_impute.csv")
normalized_df <- as.data.frame(scale(tumor_data, center = TRUE, scale = TRUE))
silwidth = NULL
opt_s = NULL
K_test = NULL
num_nonzero_weights = NULL
i=1
for(s in seq(1.5, 20, 0.5)){
K_test[i] = KMeansSparseCluster(x=normalized_df, K=4, wbounds = s)
num_nonzero_weights[i] = length(K_test[i][[1]]$ws[which(K_test[i][[1]]$ws > 0)])
i = i+1
}
bounds_space = seq(2, 6, len=20)
for(k in 1:7){
km.permute = KMeansSparseCluster.permute(x=normalized_df, K=k+1,
wbounds=bounds_space, nperms=25)
opt_s[k+1] = km.permute$bestw
optimal_gap = max(km.permute$gaps)
kmeans = KMeansSparseCluster(x=normalized_df, K=k+1, wbounds = opt_s[k+1])
silwidth[k+1] = cluster.stats(dist(normalized_df), kmeans[[1]]$Cs,
silhouette = TRUE)$avg.silwidth
}
K_optimal = which.max(silwidth)
sparse_kmeans = KMeansSparseCluster(x=normalized_df, K = K_optimal, wbounds = opt_s[K_optimal])
setwd("C:\\Users\\anjal\\Downloads\\HDA")
tumor_data = read.csv("tumor_impute.csv")
source("spca-master\\R\\spca.R")
spca_obj <- spca(tumor_data, k=6, beta=0)
summary(spca_obj)
spca_obj$eigenvalues
options(max.print = 4000)
loadings = spca_obj$loadings
feature_names = colnames(tumor_data)
library(ggplot2)
library(gridExtra)
# Extract loadings and feature names
loadings <- spca_obj$loadings
feature_names <- colnames(tumor_data)
# Number of principal components to consider
num_components <- 6
# Create a list to store the plots for each PC
plots <- list()
# Define a color palette for the PCs
pc_colors <- rainbow(num_components)
# Iterate through principal components
for (i in 1:num_components) {
component_loadings <- loadings[, i]
# Filter out features with all-zero loadings
non_zero_loadings_indices <- component_loadings != 0
non_zero_feature_names <- feature_names[non_zero_loadings_indices]
non_zero_component_loadings <- component_loadings[non_zero_loadings_indices]
sorted_indices <- order(-abs(non_zero_component_loadings))
sorted_feature_names <- non_zero_feature_names[sorted_indices]
sorted_component_loadings <- non_zero_component_loadings[sorted_indices]
# Determine the number of features to plot (up to 10 or the actual number of non-zero loadings)
num_features_to_plot <- min(length(sorted_feature_names), 10)
top_feature_names <- sorted_feature_names[1:num_features_to_plot]
top_component_loadings <- sorted_component_loadings[1:num_features_to_plot]
# Create a data frame for the current PC
pc_data <- data.frame(
Feature = top_feature_names,
Importance = abs(top_component_loadings),
PC = factor(paste("PC", i))
)
# Reverse the order of features to have the most important on top
pc_data$Feature <- factor(pc_data$Feature, levels = rev(pc_data$Feature))
# Create a bar plot for the current PC with a unique color
pc_plot <- ggplot(pc_data, aes(x = Importance, y = Feature, fill = PC)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = pc_colors[i])  # Assign a unique color to each PC
pc_plot <- pc_plot + labs(
title = paste("Top Features - PC", i),
x = "Importance",
y = "Feature Names"
) +
theme_minimal() +
theme(legend.position = "none")
plots[[i]] <- pc_plot
}
# Arrange the bar plots in a grid
grid.arrange(grobs = plots, ncol = 2)
# Calculate the overall feature importance
overall_importance <- rowSums(abs(loadings))
# Create a data frame for overall importance
overall_data <- data.frame(
Feature = feature_names,
Importance = overall_importance
)
# Sort the data frame by importance in descending order
overall_data <- overall_data[order(-overall_data$Importance), ]
overall_data <- overall_data[overall_data$Importance != 0, ]
# Select the top 15 overall important features
top_15_overall_data <- head(overall_data, 25)
# Create a bar plot for the top 15 overall important features in decreasing order
overall_plot <- ggplot(top_15_overall_data, aes(x = reorder(Feature, -Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 25 Overall Important Features", x = "Feature Names", y = "Importance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 40, hjust = 1, vjust = 0.5))
# Display the top 15 overall feature importance bar plot
print(overall_plot)
nrow(overall_data)
overall_data
